// <auto-generated/>
#nullable enable

namespace Health.Web.Api.Client
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class AddHealthLogResult : global::System.IEquatable<AddHealthLogResult>, IAddHealthLogResult
    {
        public AddHealthLogResult(global::Health.Web.Api.Client.IAddHealthLog_AddHealthLog? addHealthLog)
        {
            AddHealthLog = addHealthLog;
        }

        public global::Health.Web.Api.Client.IAddHealthLog_AddHealthLog? AddHealthLog { get; }

        public virtual global::System.Boolean Equals(AddHealthLogResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AddHealthLog is null && other.AddHealthLog is null) || AddHealthLog != null && AddHealthLog.Equals(other.AddHealthLog)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddHealthLogResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AddHealthLog != null)
                {
                    hash ^= 397 * AddHealthLog.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class AddHealthLog_AddHealthLog_HealthLog : global::System.IEquatable<AddHealthLog_AddHealthLog_HealthLog>, IAddHealthLog_AddHealthLog_HealthLog
    {
        public AddHealthLog_AddHealthLog_HealthLog(global::System.Int32 id)
        {
            Id = id;
        }

        public global::System.Int32 Id { get; }

        public virtual global::System.Boolean Equals(AddHealthLog_AddHealthLog_HealthLog? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddHealthLog_AddHealthLog_HealthLog)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public interface IAddHealthLogResult
    {
        public global::Health.Web.Api.Client.IAddHealthLog_AddHealthLog? AddHealthLog { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public interface IAddHealthLog_AddHealthLog
    {
        public global::System.Int32 Id { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public interface IAddHealthLog_AddHealthLog_HealthLog : IAddHealthLog_AddHealthLog
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class AddPatientResult : global::System.IEquatable<AddPatientResult>, IAddPatientResult
    {
        public AddPatientResult(global::Health.Web.Api.Client.IAddPatient_AddPatient? addPatient)
        {
            AddPatient = addPatient;
        }

        public global::Health.Web.Api.Client.IAddPatient_AddPatient? AddPatient { get; }

        public virtual global::System.Boolean Equals(AddPatientResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AddPatient is null && other.AddPatient is null) || AddPatient != null && AddPatient.Equals(other.AddPatient)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddPatientResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AddPatient != null)
                {
                    hash ^= 397 * AddPatient.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class AddPatient_AddPatient_AddPatientResponsePayload : global::System.IEquatable<AddPatient_AddPatient_AddPatientResponsePayload>, IAddPatient_AddPatient_AddPatientResponsePayload
    {
        public AddPatient_AddPatient_AddPatientResponsePayload(global::Health.Web.Api.Client.IAddPatient_AddPatient_Patient? patient)
        {
            Patient = patient;
        }

        public global::Health.Web.Api.Client.IAddPatient_AddPatient_Patient? Patient { get; }

        public virtual global::System.Boolean Equals(AddPatient_AddPatient_AddPatientResponsePayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Patient is null && other.Patient is null) || Patient != null && Patient.Equals(other.Patient)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddPatient_AddPatient_AddPatientResponsePayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Patient != null)
                {
                    hash ^= 397 * Patient.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class AddPatient_AddPatient_Patient_Patient : global::System.IEquatable<AddPatient_AddPatient_Patient_Patient>, IAddPatient_AddPatient_Patient_Patient
    {
        public AddPatient_AddPatient_Patient_Patient(global::System.Int32 id, global::System.Int32? userId)
        {
            Id = id;
            UserId = userId;
        }

        public global::System.Int32 Id { get; }

        public global::System.Int32? UserId { get; }

        public virtual global::System.Boolean Equals(AddPatient_AddPatient_Patient_Patient? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && UserId == other.UserId;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddPatient_AddPatient_Patient_Patient)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (UserId != null)
                {
                    hash ^= 397 * UserId.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public interface IAddPatientResult
    {
        public global::Health.Web.Api.Client.IAddPatient_AddPatient? AddPatient { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public interface IAddPatient_AddPatient
    {
        public global::Health.Web.Api.Client.IAddPatient_AddPatient_Patient? Patient { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public interface IAddPatient_AddPatient_AddPatientResponsePayload : IAddPatient_AddPatient
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public interface IAddPatient_AddPatient_Patient
    {
        public global::System.Int32 Id { get; }

        public global::System.Int32? UserId { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public interface IAddPatient_AddPatient_Patient_Patient : IAddPatient_AddPatient_Patient
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class GetPatientByIdResult : global::System.IEquatable<GetPatientByIdResult>, IGetPatientByIdResult
    {
        public GetPatientByIdResult(global::System.Collections.Generic.IReadOnlyList<global::Health.Web.Api.Client.IGetPatientById_Patients?>? patients)
        {
            Patients = patients;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Health.Web.Api.Client.IGetPatientById_Patients?>? Patients { get; }

        public virtual global::System.Boolean Equals(GetPatientByIdResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Patients, other.Patients));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPatientByIdResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Patients != null)
                {
                    foreach (var Patients_elm in Patients)
                    {
                        if (Patients_elm != null)
                        {
                            hash ^= 397 * Patients_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class GetPatientById_Patients_Patient : global::System.IEquatable<GetPatientById_Patients_Patient>, IGetPatientById_Patients_Patient
    {
        public GetPatientById_Patients_Patient(global::System.Int32 id, global::Health.Web.Api.Client.IGetPatientById_Patients_User? user, global::System.Collections.Generic.IReadOnlyList<global::Health.Web.Api.Client.IGetPatientById_Patients_Relationships?>? relationships)
        {
            Id = id;
            User = user;
            Relationships = relationships;
        }

        public global::System.Int32 Id { get; }

        public global::Health.Web.Api.Client.IGetPatientById_Patients_User? User { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Health.Web.Api.Client.IGetPatientById_Patients_Relationships?>? Relationships { get; }

        public virtual global::System.Boolean Equals(GetPatientById_Patients_Patient? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((User is null && other.User is null) || User != null && User.Equals(other.User)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Relationships, other.Relationships);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPatientById_Patients_Patient)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (User != null)
                {
                    hash ^= 397 * User.GetHashCode();
                }

                if (Relationships != null)
                {
                    foreach (var Relationships_elm in Relationships)
                    {
                        if (Relationships_elm != null)
                        {
                            hash ^= 397 * Relationships_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class GetPatientById_Patients_User_User : global::System.IEquatable<GetPatientById_Patients_User_User>, IGetPatientById_Patients_User_User
    {
        public GetPatientById_Patients_User_User(global::System.String? firstName, global::System.String? lastName, global::System.String? email, global::System.String? phoneNumber, global::System.String? pronouns)
        {
            FirstName = firstName;
            LastName = lastName;
            Email = email;
            PhoneNumber = phoneNumber;
            Pronouns = pronouns;
        }

        public global::System.String? FirstName { get; }

        public global::System.String? LastName { get; }

        public global::System.String? Email { get; }

        public global::System.String? PhoneNumber { get; }

        public global::System.String? Pronouns { get; }

        public virtual global::System.Boolean Equals(GetPatientById_Patients_User_User? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((FirstName is null && other.FirstName is null) || FirstName != null && FirstName.Equals(other.FirstName))) && ((LastName is null && other.LastName is null) || LastName != null && LastName.Equals(other.LastName)) && ((Email is null && other.Email is null) || Email != null && Email.Equals(other.Email)) && ((PhoneNumber is null && other.PhoneNumber is null) || PhoneNumber != null && PhoneNumber.Equals(other.PhoneNumber)) && ((Pronouns is null && other.Pronouns is null) || Pronouns != null && Pronouns.Equals(other.Pronouns));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPatientById_Patients_User_User)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (FirstName != null)
                {
                    hash ^= 397 * FirstName.GetHashCode();
                }

                if (LastName != null)
                {
                    hash ^= 397 * LastName.GetHashCode();
                }

                if (Email != null)
                {
                    hash ^= 397 * Email.GetHashCode();
                }

                if (PhoneNumber != null)
                {
                    hash ^= 397 * PhoneNumber.GetHashCode();
                }

                if (Pronouns != null)
                {
                    hash ^= 397 * Pronouns.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class GetPatientById_Patients_Relationships_Relationship : global::System.IEquatable<GetPatientById_Patients_Relationships_Relationship>, IGetPatientById_Patients_Relationships_Relationship
    {
        public GetPatientById_Patients_Relationships_Relationship(global::System.Collections.Generic.IReadOnlyList<global::Health.Web.Api.Client.IGetPatientById_Patients_Relationships_Habits?>? habits, global::Health.Web.Api.Client.IGetPatientById_Patients_Relationships_Professional? professional)
        {
            Habits = habits;
            Professional = professional;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Health.Web.Api.Client.IGetPatientById_Patients_Relationships_Habits?>? Habits { get; }

        public global::Health.Web.Api.Client.IGetPatientById_Patients_Relationships_Professional? Professional { get; }

        public virtual global::System.Boolean Equals(GetPatientById_Patients_Relationships_Relationship? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Habits, other.Habits)) && ((Professional is null && other.Professional is null) || Professional != null && Professional.Equals(other.Professional));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPatientById_Patients_Relationships_Relationship)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Habits != null)
                {
                    foreach (var Habits_elm in Habits)
                    {
                        if (Habits_elm != null)
                        {
                            hash ^= 397 * Habits_elm.GetHashCode();
                        }
                    }
                }

                if (Professional != null)
                {
                    hash ^= 397 * Professional.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class GetPatientById_Patients_Relationships_Habits_Habit : global::System.IEquatable<GetPatientById_Patients_Relationships_Habits_Habit>, IGetPatientById_Patients_Relationships_Habits_Habit
    {
        public GetPatientById_Patients_Relationships_Habits_Habit(global::System.Int32 id, global::System.String? habitName)
        {
            Id = id;
            HabitName = habitName;
        }

        public global::System.Int32 Id { get; }

        public global::System.String? HabitName { get; }

        public virtual global::System.Boolean Equals(GetPatientById_Patients_Relationships_Habits_Habit? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((HabitName is null && other.HabitName is null) || HabitName != null && HabitName.Equals(other.HabitName));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPatientById_Patients_Relationships_Habits_Habit)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (HabitName != null)
                {
                    hash ^= 397 * HabitName.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class GetPatientById_Patients_Relationships_Professional_Professional : global::System.IEquatable<GetPatientById_Patients_Relationships_Professional_Professional>, IGetPatientById_Patients_Relationships_Professional_Professional
    {
        public GetPatientById_Patients_Relationships_Professional_Professional(global::System.Int32 id, global::Health.Web.Api.Client.IGetPatientById_Patients_Relationships_Professional_User? user)
        {
            Id = id;
            User = user;
        }

        public global::System.Int32 Id { get; }

        public global::Health.Web.Api.Client.IGetPatientById_Patients_Relationships_Professional_User? User { get; }

        public virtual global::System.Boolean Equals(GetPatientById_Patients_Relationships_Professional_Professional? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((User is null && other.User is null) || User != null && User.Equals(other.User));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPatientById_Patients_Relationships_Professional_Professional)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (User != null)
                {
                    hash ^= 397 * User.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class GetPatientById_Patients_Relationships_Professional_User_User : global::System.IEquatable<GetPatientById_Patients_Relationships_Professional_User_User>, IGetPatientById_Patients_Relationships_Professional_User_User
    {
        public GetPatientById_Patients_Relationships_Professional_User_User(global::System.String? firstName, global::System.String? lastName, global::System.String? email, global::System.String? phoneNumber, global::System.String? pronouns)
        {
            FirstName = firstName;
            LastName = lastName;
            Email = email;
            PhoneNumber = phoneNumber;
            Pronouns = pronouns;
        }

        public global::System.String? FirstName { get; }

        public global::System.String? LastName { get; }

        public global::System.String? Email { get; }

        public global::System.String? PhoneNumber { get; }

        public global::System.String? Pronouns { get; }

        public virtual global::System.Boolean Equals(GetPatientById_Patients_Relationships_Professional_User_User? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((FirstName is null && other.FirstName is null) || FirstName != null && FirstName.Equals(other.FirstName))) && ((LastName is null && other.LastName is null) || LastName != null && LastName.Equals(other.LastName)) && ((Email is null && other.Email is null) || Email != null && Email.Equals(other.Email)) && ((PhoneNumber is null && other.PhoneNumber is null) || PhoneNumber != null && PhoneNumber.Equals(other.PhoneNumber)) && ((Pronouns is null && other.Pronouns is null) || Pronouns != null && Pronouns.Equals(other.Pronouns));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPatientById_Patients_Relationships_Professional_User_User)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (FirstName != null)
                {
                    hash ^= 397 * FirstName.GetHashCode();
                }

                if (LastName != null)
                {
                    hash ^= 397 * LastName.GetHashCode();
                }

                if (Email != null)
                {
                    hash ^= 397 * Email.GetHashCode();
                }

                if (PhoneNumber != null)
                {
                    hash ^= 397 * PhoneNumber.GetHashCode();
                }

                if (Pronouns != null)
                {
                    hash ^= 397 * Pronouns.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public interface IGetPatientByIdResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Health.Web.Api.Client.IGetPatientById_Patients?>? Patients { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public interface IGetPatientById_Patients
    {
        public global::System.Int32 Id { get; }

        public global::Health.Web.Api.Client.IGetPatientById_Patients_User? User { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Health.Web.Api.Client.IGetPatientById_Patients_Relationships?>? Relationships { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public interface IGetPatientById_Patients_Patient : IGetPatientById_Patients
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public interface IUserFragment
    {
        public global::System.String? FirstName { get; }

        public global::System.String? LastName { get; }

        public global::System.String? Email { get; }

        public global::System.String? PhoneNumber { get; }

        public global::System.String? Pronouns { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public interface IGetPatientById_Patients_User : IUserFragment
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public interface IGetPatientById_Patients_User_User : IGetPatientById_Patients_User
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public interface IGetPatientById_Patients_Relationships
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Health.Web.Api.Client.IGetPatientById_Patients_Relationships_Habits?>? Habits { get; }

        public global::Health.Web.Api.Client.IGetPatientById_Patients_Relationships_Professional? Professional { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public interface IGetPatientById_Patients_Relationships_Relationship : IGetPatientById_Patients_Relationships
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public interface IGetPatientById_Patients_Relationships_Habits
    {
        public global::System.Int32 Id { get; }

        public global::System.String? HabitName { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public interface IGetPatientById_Patients_Relationships_Habits_Habit : IGetPatientById_Patients_Relationships_Habits
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public interface IGetPatientById_Patients_Relationships_Professional
    {
        public global::System.Int32 Id { get; }

        public global::Health.Web.Api.Client.IGetPatientById_Patients_Relationships_Professional_User? User { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public interface IGetPatientById_Patients_Relationships_Professional_Professional : IGetPatientById_Patients_Relationships_Professional
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public interface IGetPatientById_Patients_Relationships_Professional_User : IUserFragment
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public interface IGetPatientById_Patients_Relationships_Professional_User_User : IGetPatientById_Patients_Relationships_Professional_User
    {
    }

    /// <summary>
    /// Represents the operation service of the AddHealthLog GraphQL operation
    /// <code>
    /// mutation AddHealthLog($patientId: Int!, $log: String!) {
    ///   addHealthLog(patientId: $patientId, log: $log) {
    ///     __typename
    ///     id
    ///     ... on HealthLog {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class AddHealthLogMutationDocument : global::StrawberryShake.IDocument
    {
        private AddHealthLogMutationDocument()
        {
        }

        public static AddHealthLogMutationDocument Instance { get; } = new AddHealthLogMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x64, 0x64, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x28, 0x24, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x6c, 0x6f, 0x67, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x64, 0x64, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x28, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x2c, 0x20, 0x6c, 0x6f, 0x67, 0x3a, 0x20, 0x24, 0x6c, 0x6f, 0x67, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "c8915fed7b00c5bedf4cee12f4916538");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the AddHealthLog GraphQL operation
    /// <code>
    /// mutation AddHealthLog($patientId: Int!, $log: String!) {
    ///   addHealthLog(patientId: $patientId, log: $log) {
    ///     __typename
    ///     id
    ///     ... on HealthLog {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class AddHealthLogMutation : global::Health.Web.Api.Client.IAddHealthLogMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IAddHealthLogResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public AddHealthLogMutation(global::StrawberryShake.IOperationExecutor<IAddHealthLogResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAddHealthLogResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddHealthLogResult>> ExecuteAsync(global::System.Int32 patientId, global::System.String log, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(patientId, log);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAddHealthLogResult>> Watch(global::System.Int32 patientId, global::System.String log, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(patientId, log);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 patientId, global::System.String log)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("patientId", FormatPatientId(patientId));
            variables.Add("log", FormatLog(log));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: AddHealthLogMutationDocument.Instance.Hash.Value, name: "AddHealthLog", document: AddHealthLogMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatPatientId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatLog(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the AddHealthLog GraphQL operation
    /// <code>
    /// mutation AddHealthLog($patientId: Int!, $log: String!) {
    ///   addHealthLog(patientId: $patientId, log: $log) {
    ///     __typename
    ///     id
    ///     ... on HealthLog {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public interface IAddHealthLogMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddHealthLogResult>> ExecuteAsync(global::System.Int32 patientId, global::System.String log, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IAddHealthLogResult>> Watch(global::System.Int32 patientId, global::System.String log, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the AddPatient GraphQL operation
    /// <code>
    /// mutation AddPatient($firstName: String, $lastName: String, $email: String, $phoneNumber: String, $pronouns: String) {
    ///   addPatient(input: { firstName: $firstName, lastName: $lastName, email: $email, phoneNumber: $phoneNumber, pronouns: $pronouns }) {
    ///     __typename
    ///     patient {
    ///       __typename
    ///       id
    ///       userId
    ///       ... on Patient {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class AddPatientMutationDocument : global::StrawberryShake.IDocument
    {
        private AddPatientMutationDocument()
        {
        }

        public static AddPatientMutationDocument Instance { get; } = new AddPatientMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x64, 0x64, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x28, 0x24, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x70, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x6e, 0x73, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x64, 0x64, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x28, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x7b, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x24, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x3a, 0x20, 0x24, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2c, 0x20, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2c, 0x20, 0x70, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x6e, 0x73, 0x3a, 0x20, 0x24, 0x70, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x6e, 0x73, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "679239e6fa4540b2191b91cc0fc8b44b");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the AddPatient GraphQL operation
    /// <code>
    /// mutation AddPatient($firstName: String, $lastName: String, $email: String, $phoneNumber: String, $pronouns: String) {
    ///   addPatient(input: { firstName: $firstName, lastName: $lastName, email: $email, phoneNumber: $phoneNumber, pronouns: $pronouns }) {
    ///     __typename
    ///     patient {
    ///       __typename
    ///       id
    ///       userId
    ///       ... on Patient {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class AddPatientMutation : global::Health.Web.Api.Client.IAddPatientMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IAddPatientResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public AddPatientMutation(global::StrawberryShake.IOperationExecutor<IAddPatientResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAddPatientResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddPatientResult>> ExecuteAsync(global::System.String? firstName, global::System.String? lastName, global::System.String? email, global::System.String? phoneNumber, global::System.String? pronouns, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(firstName, lastName, email, phoneNumber, pronouns);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAddPatientResult>> Watch(global::System.String? firstName, global::System.String? lastName, global::System.String? email, global::System.String? phoneNumber, global::System.String? pronouns, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(firstName, lastName, email, phoneNumber, pronouns);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String? firstName, global::System.String? lastName, global::System.String? email, global::System.String? phoneNumber, global::System.String? pronouns)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("firstName", FormatFirstName(firstName));
            variables.Add("lastName", FormatLastName(lastName));
            variables.Add("email", FormatEmail(email));
            variables.Add("phoneNumber", FormatPhoneNumber(phoneNumber));
            variables.Add("pronouns", FormatPronouns(pronouns));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: AddPatientMutationDocument.Instance.Hash.Value, name: "AddPatient", document: AddPatientMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatFirstName(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatLastName(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatEmail(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatPhoneNumber(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatPronouns(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the AddPatient GraphQL operation
    /// <code>
    /// mutation AddPatient($firstName: String, $lastName: String, $email: String, $phoneNumber: String, $pronouns: String) {
    ///   addPatient(input: { firstName: $firstName, lastName: $lastName, email: $email, phoneNumber: $phoneNumber, pronouns: $pronouns }) {
    ///     __typename
    ///     patient {
    ///       __typename
    ///       id
    ///       userId
    ///       ... on Patient {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public interface IAddPatientMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddPatientResult>> ExecuteAsync(global::System.String? firstName, global::System.String? lastName, global::System.String? email, global::System.String? phoneNumber, global::System.String? pronouns, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IAddPatientResult>> Watch(global::System.String? firstName, global::System.String? lastName, global::System.String? email, global::System.String? phoneNumber, global::System.String? pronouns, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetPatientById GraphQL operation
    /// <code>
    /// query GetPatientById($patientId: Int!) {
    ///   patients(where: { id: { eq: $patientId } }) {
    ///     __typename
    ///     id
    ///     user {
    ///       __typename
    ///       ... UserFragment
    ///       ... on User {
    ///         id
    ///       }
    ///     }
    ///     relationships {
    ///       __typename
    ///       habits {
    ///         __typename
    ///         id
    ///         habitName
    ///         ... on Habit {
    ///           id
    ///         }
    ///       }
    ///       professional {
    ///         __typename
    ///         id
    ///         user {
    ///           __typename
    ///           ... UserFragment
    ///           ... on User {
    ///             id
    ///           }
    ///         }
    ///         ... on Professional {
    ///           id
    ///         }
    ///       }
    ///       ... on Relationship {
    ///         id
    ///       }
    ///     }
    ///     ... on Patient {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment UserFragment on User {
    ///   firstName
    ///   lastName
    ///   email
    ///   phoneNumber
    ///   pronouns
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class GetPatientByIdQueryDocument : global::StrawberryShake.IDocument
    {
        private GetPatientByIdQueryDocument()
        {
        }

        public static GetPatientByIdQueryDocument Instance { get; } = new GetPatientByIdQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x28, 0x24, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x28, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x3a, 0x20, 0x7b, 0x20, 0x65, 0x71, 0x3a, 0x20, 0x24, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x55, 0x73, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x68, 0x61, 0x62, 0x69, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x68, 0x61, 0x62, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x48, 0x61, 0x62, 0x69, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x55, 0x73, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x55, 0x73, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x6e, 0x73, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "bb8761c8ef4305087d32cc059ca4aaac");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetPatientById GraphQL operation
    /// <code>
    /// query GetPatientById($patientId: Int!) {
    ///   patients(where: { id: { eq: $patientId } }) {
    ///     __typename
    ///     id
    ///     user {
    ///       __typename
    ///       ... UserFragment
    ///       ... on User {
    ///         id
    ///       }
    ///     }
    ///     relationships {
    ///       __typename
    ///       habits {
    ///         __typename
    ///         id
    ///         habitName
    ///         ... on Habit {
    ///           id
    ///         }
    ///       }
    ///       professional {
    ///         __typename
    ///         id
    ///         user {
    ///           __typename
    ///           ... UserFragment
    ///           ... on User {
    ///             id
    ///           }
    ///         }
    ///         ... on Professional {
    ///           id
    ///         }
    ///       }
    ///       ... on Relationship {
    ///         id
    ///       }
    ///     }
    ///     ... on Patient {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment UserFragment on User {
    ///   firstName
    ///   lastName
    ///   email
    ///   phoneNumber
    ///   pronouns
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class GetPatientByIdQuery : global::Health.Web.Api.Client.IGetPatientByIdQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetPatientByIdResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public GetPatientByIdQuery(global::StrawberryShake.IOperationExecutor<IGetPatientByIdResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetPatientByIdResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPatientByIdResult>> ExecuteAsync(global::System.Int32 patientId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(patientId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPatientByIdResult>> Watch(global::System.Int32 patientId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(patientId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 patientId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("patientId", FormatPatientId(patientId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetPatientByIdQueryDocument.Instance.Hash.Value, name: "GetPatientById", document: GetPatientByIdQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatPatientId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetPatientById GraphQL operation
    /// <code>
    /// query GetPatientById($patientId: Int!) {
    ///   patients(where: { id: { eq: $patientId } }) {
    ///     __typename
    ///     id
    ///     user {
    ///       __typename
    ///       ... UserFragment
    ///       ... on User {
    ///         id
    ///       }
    ///     }
    ///     relationships {
    ///       __typename
    ///       habits {
    ///         __typename
    ///         id
    ///         habitName
    ///         ... on Habit {
    ///           id
    ///         }
    ///       }
    ///       professional {
    ///         __typename
    ///         id
    ///         user {
    ///           __typename
    ///           ... UserFragment
    ///           ... on User {
    ///             id
    ///           }
    ///         }
    ///         ... on Professional {
    ///           id
    ///         }
    ///       }
    ///       ... on Relationship {
    ///         id
    ///       }
    ///     }
    ///     ... on Patient {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment UserFragment on User {
    ///   firstName
    ///   lastName
    ///   email
    ///   phoneNumber
    ///   pronouns
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public interface IGetPatientByIdQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPatientByIdResult>> ExecuteAsync(global::System.Int32 patientId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPatientByIdResult>> Watch(global::System.Int32 patientId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the HoopApiClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class HoopApiClient : global::Health.Web.Api.Client.IHoopApiClient
    {
        private readonly global::Health.Web.Api.Client.IAddHealthLogMutation _addHealthLog;
        private readonly global::Health.Web.Api.Client.IAddPatientMutation _addPatient;
        private readonly global::Health.Web.Api.Client.IGetPatientByIdQuery _getPatientById;
        public HoopApiClient(global::Health.Web.Api.Client.IAddHealthLogMutation addHealthLog, global::Health.Web.Api.Client.IAddPatientMutation addPatient, global::Health.Web.Api.Client.IGetPatientByIdQuery getPatientById)
        {
            _addHealthLog = addHealthLog ?? throw new global::System.ArgumentNullException(nameof(addHealthLog));
            _addPatient = addPatient ?? throw new global::System.ArgumentNullException(nameof(addPatient));
            _getPatientById = getPatientById ?? throw new global::System.ArgumentNullException(nameof(getPatientById));
        }

        public static global::System.String ClientName => "HoopApiClient";
        public global::Health.Web.Api.Client.IAddHealthLogMutation AddHealthLog => _addHealthLog;
        public global::Health.Web.Api.Client.IAddPatientMutation AddPatient => _addPatient;
        public global::Health.Web.Api.Client.IGetPatientByIdQuery GetPatientById => _getPatientById;
    }

    /// <summary>
    /// Represents the HoopApiClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public interface IHoopApiClient
    {
        global::Health.Web.Api.Client.IAddHealthLogMutation AddHealthLog { get; }

        global::Health.Web.Api.Client.IAddPatientMutation AddPatient { get; }

        global::Health.Web.Api.Client.IGetPatientByIdQuery GetPatientById { get; }
    }
}

namespace Health.Web.Api.Client.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class HealthLogEntity
    {
        public HealthLogEntity(global::System.Int32 id = default !)
        {
            Id = id;
        }

        public global::System.Int32 Id { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class PatientEntity
    {
        public PatientEntity(global::System.Int32 id = default !, global::System.Int32? userId = default !, global::StrawberryShake.EntityId? user = default !, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? relationships = default !)
        {
            Id = id;
            UserId = userId;
            User = user;
            Relationships = relationships;
        }

        public global::System.Int32 Id { get; }

        public global::System.Int32? UserId { get; }

        public global::StrawberryShake.EntityId? User { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Relationships { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class UserEntity
    {
        public UserEntity(global::System.String? firstName = default !, global::System.String? lastName = default !, global::System.String? email = default !, global::System.String? phoneNumber = default !, global::System.String? pronouns = default !)
        {
            FirstName = firstName;
            LastName = lastName;
            Email = email;
            PhoneNumber = phoneNumber;
            Pronouns = pronouns;
        }

        public global::System.String? FirstName { get; }

        public global::System.String? LastName { get; }

        public global::System.String? Email { get; }

        public global::System.String? PhoneNumber { get; }

        public global::System.String? Pronouns { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class RelationshipEntity
    {
        public RelationshipEntity(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? habits = default !, global::StrawberryShake.EntityId? professional = default !)
        {
            Habits = habits;
            Professional = professional;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Habits { get; }

        public global::StrawberryShake.EntityId? Professional { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class HabitEntity
    {
        public HabitEntity(global::System.Int32 id = default !, global::System.String? habitName = default !)
        {
            Id = id;
            HabitName = habitName;
        }

        public global::System.Int32 Id { get; }

        public global::System.String? HabitName { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class ProfessionalEntity
    {
        public ProfessionalEntity(global::System.Int32 id = default !, global::StrawberryShake.EntityId? user = default !)
        {
            Id = id;
            User = user;
        }

        public global::System.Int32 Id { get; }

        public global::StrawberryShake.EntityId? User { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class AddHealthLogResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Health.Web.Api.Client.AddHealthLogResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.HealthLogEntity, AddHealthLog_AddHealthLog_HealthLog> _addHealthLog_AddHealthLog_HealthLogFromHealthLogEntityMapper;
        public AddHealthLogResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.HealthLogEntity, AddHealthLog_AddHealthLog_HealthLog> addHealthLog_AddHealthLog_HealthLogFromHealthLogEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _addHealthLog_AddHealthLog_HealthLogFromHealthLogEntityMapper = addHealthLog_AddHealthLog_HealthLogFromHealthLogEntityMapper ?? throw new global::System.ArgumentNullException(nameof(addHealthLog_AddHealthLog_HealthLogFromHealthLogEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Health.Web.Api.Client.IAddHealthLogResult);
        public AddHealthLogResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is AddHealthLogResultInfo info)
            {
                return new AddHealthLogResult(MapIAddHealthLog_AddHealthLog(info.AddHealthLog, snapshot));
            }

            throw new global::System.ArgumentException("AddHealthLogResultInfo expected.");
        }

        private global::Health.Web.Api.Client.IAddHealthLog_AddHealthLog? MapIAddHealthLog_AddHealthLog(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("HealthLog", global::System.StringComparison.Ordinal))
            {
                return _addHealthLog_AddHealthLog_HealthLogFromHealthLogEntityMapper.Map(snapshot.GetEntity<global::Health.Web.Api.Client.State.HealthLogEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class AddHealthLogResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public AddHealthLogResultInfo(global::StrawberryShake.EntityId? addHealthLog, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AddHealthLog = addHealthLog;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::StrawberryShake.EntityId? AddHealthLog { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new AddHealthLogResultInfo(AddHealthLog, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class AddHealthLog_AddHealthLog_HealthLogFromHealthLogEntityMapper : global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.HealthLogEntity, AddHealthLog_AddHealthLog_HealthLog>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public AddHealthLog_AddHealthLog_HealthLogFromHealthLogEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public AddHealthLog_AddHealthLog_HealthLog Map(global::Health.Web.Api.Client.State.HealthLogEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new AddHealthLog_AddHealthLog_HealthLog(entity.Id);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class AddPatientResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Health.Web.Api.Client.AddPatientResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.PatientEntity, AddPatient_AddPatient_Patient_Patient> _addPatient_AddPatient_Patient_PatientFromPatientEntityMapper;
        public AddPatientResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.PatientEntity, AddPatient_AddPatient_Patient_Patient> addPatient_AddPatient_Patient_PatientFromPatientEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _addPatient_AddPatient_Patient_PatientFromPatientEntityMapper = addPatient_AddPatient_Patient_PatientFromPatientEntityMapper ?? throw new global::System.ArgumentNullException(nameof(addPatient_AddPatient_Patient_PatientFromPatientEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Health.Web.Api.Client.IAddPatientResult);
        public AddPatientResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is AddPatientResultInfo info)
            {
                return new AddPatientResult(MapIAddPatient_AddPatient(info.AddPatient, snapshot));
            }

            throw new global::System.ArgumentException("AddPatientResultInfo expected.");
        }

        private global::Health.Web.Api.Client.IAddPatient_AddPatient? MapIAddPatient_AddPatient(global::Health.Web.Api.Client.State.AddPatientResponsePayloadData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IAddPatient_AddPatient returnValue = default !;
            if (data?.__typename.Equals("AddPatientResponsePayload", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new AddPatient_AddPatient_AddPatientResponsePayload(MapIAddPatient_AddPatient_Patient(data.Patient, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Health.Web.Api.Client.IAddPatient_AddPatient_Patient? MapIAddPatient_AddPatient_Patient(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Patient", global::System.StringComparison.Ordinal))
            {
                return _addPatient_AddPatient_Patient_PatientFromPatientEntityMapper.Map(snapshot.GetEntity<global::Health.Web.Api.Client.State.PatientEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class AddPatientResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public AddPatientResultInfo(global::Health.Web.Api.Client.State.AddPatientResponsePayloadData? addPatient, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AddPatient = addPatient;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Health.Web.Api.Client.State.AddPatientResponsePayloadData? AddPatient { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new AddPatientResultInfo(AddPatient, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class AddPatient_AddPatient_Patient_PatientFromPatientEntityMapper : global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.PatientEntity, AddPatient_AddPatient_Patient_Patient>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public AddPatient_AddPatient_Patient_PatientFromPatientEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public AddPatient_AddPatient_Patient_Patient Map(global::Health.Web.Api.Client.State.PatientEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new AddPatient_AddPatient_Patient_Patient(entity.Id, entity.UserId);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class GetPatientByIdResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Health.Web.Api.Client.GetPatientByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.PatientEntity, GetPatientById_Patients_Patient> _getPatientById_Patients_PatientFromPatientEntityMapper;
        public GetPatientByIdResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.PatientEntity, GetPatientById_Patients_Patient> getPatientById_Patients_PatientFromPatientEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getPatientById_Patients_PatientFromPatientEntityMapper = getPatientById_Patients_PatientFromPatientEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getPatientById_Patients_PatientFromPatientEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Health.Web.Api.Client.IGetPatientByIdResult);
        public GetPatientByIdResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetPatientByIdResultInfo info)
            {
                return new GetPatientByIdResult(MapIGetPatientById_PatientsArray(info.Patients, snapshot));
            }

            throw new global::System.ArgumentException("GetPatientByIdResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Health.Web.Api.Client.IGetPatientById_Patients?>? MapIGetPatientById_PatientsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var patients = new global::System.Collections.Generic.List<global::Health.Web.Api.Client.IGetPatientById_Patients?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                patients.Add(MapIGetPatientById_Patients(child, snapshot));
            }

            return patients;
        }

        private global::Health.Web.Api.Client.IGetPatientById_Patients? MapIGetPatientById_Patients(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Patient", global::System.StringComparison.Ordinal))
            {
                return _getPatientById_Patients_PatientFromPatientEntityMapper.Map(snapshot.GetEntity<global::Health.Web.Api.Client.State.PatientEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class GetPatientByIdResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetPatientByIdResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? patients, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Patients = patients;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Patients { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetPatientByIdResultInfo(Patients, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class GetPatientById_Patients_PatientFromPatientEntityMapper : global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.PatientEntity, GetPatientById_Patients_Patient>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.UserEntity, GetPatientById_Patients_User_User> _getPatientById_Patients_User_UserFromUserEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.RelationshipEntity, GetPatientById_Patients_Relationships_Relationship> _getPatientById_Patients_Relationships_RelationshipFromRelationshipEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.HabitEntity, GetPatientById_Patients_Relationships_Habits_Habit> _getPatientById_Patients_Relationships_Habits_HabitFromHabitEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.ProfessionalEntity, GetPatientById_Patients_Relationships_Professional_Professional> _getPatientById_Patients_Relationships_Professional_ProfessionalFromProfessionalEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.UserEntity, GetPatientById_Patients_Relationships_Professional_User_User> _getPatientById_Patients_Relationships_Professional_User_UserFromUserEntityMapper;
        public GetPatientById_Patients_PatientFromPatientEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.UserEntity, GetPatientById_Patients_User_User> getPatientById_Patients_User_UserFromUserEntityMapper, global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.RelationshipEntity, GetPatientById_Patients_Relationships_Relationship> getPatientById_Patients_Relationships_RelationshipFromRelationshipEntityMapper, global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.HabitEntity, GetPatientById_Patients_Relationships_Habits_Habit> getPatientById_Patients_Relationships_Habits_HabitFromHabitEntityMapper, global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.ProfessionalEntity, GetPatientById_Patients_Relationships_Professional_Professional> getPatientById_Patients_Relationships_Professional_ProfessionalFromProfessionalEntityMapper, global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.UserEntity, GetPatientById_Patients_Relationships_Professional_User_User> getPatientById_Patients_Relationships_Professional_User_UserFromUserEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getPatientById_Patients_User_UserFromUserEntityMapper = getPatientById_Patients_User_UserFromUserEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getPatientById_Patients_User_UserFromUserEntityMapper));
            _getPatientById_Patients_Relationships_RelationshipFromRelationshipEntityMapper = getPatientById_Patients_Relationships_RelationshipFromRelationshipEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getPatientById_Patients_Relationships_RelationshipFromRelationshipEntityMapper));
            _getPatientById_Patients_Relationships_Habits_HabitFromHabitEntityMapper = getPatientById_Patients_Relationships_Habits_HabitFromHabitEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getPatientById_Patients_Relationships_Habits_HabitFromHabitEntityMapper));
            _getPatientById_Patients_Relationships_Professional_ProfessionalFromProfessionalEntityMapper = getPatientById_Patients_Relationships_Professional_ProfessionalFromProfessionalEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getPatientById_Patients_Relationships_Professional_ProfessionalFromProfessionalEntityMapper));
            _getPatientById_Patients_Relationships_Professional_User_UserFromUserEntityMapper = getPatientById_Patients_Relationships_Professional_User_UserFromUserEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getPatientById_Patients_Relationships_Professional_User_UserFromUserEntityMapper));
        }

        public GetPatientById_Patients_Patient Map(global::Health.Web.Api.Client.State.PatientEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetPatientById_Patients_Patient(entity.Id, MapIGetPatientById_Patients_User(entity.User, snapshot), MapIGetPatientById_Patients_RelationshipsArray(entity.Relationships, snapshot));
        }

        private global::Health.Web.Api.Client.IGetPatientById_Patients_User? MapIGetPatientById_Patients_User(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                return _getPatientById_Patients_User_UserFromUserEntityMapper.Map(snapshot.GetEntity<global::Health.Web.Api.Client.State.UserEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Health.Web.Api.Client.IGetPatientById_Patients_Relationships?>? MapIGetPatientById_Patients_RelationshipsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var relationships = new global::System.Collections.Generic.List<global::Health.Web.Api.Client.IGetPatientById_Patients_Relationships?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                relationships.Add(MapIGetPatientById_Patients_Relationships(child, snapshot));
            }

            return relationships;
        }

        private global::Health.Web.Api.Client.IGetPatientById_Patients_Relationships? MapIGetPatientById_Patients_Relationships(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Relationship", global::System.StringComparison.Ordinal))
            {
                return _getPatientById_Patients_Relationships_RelationshipFromRelationshipEntityMapper.Map(snapshot.GetEntity<global::Health.Web.Api.Client.State.RelationshipEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Health.Web.Api.Client.IGetPatientById_Patients_Relationships_Habits?>? MapIGetPatientById_Patients_Relationships_HabitsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var habits = new global::System.Collections.Generic.List<global::Health.Web.Api.Client.IGetPatientById_Patients_Relationships_Habits?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                habits.Add(MapIGetPatientById_Patients_Relationships_Habits(child, snapshot));
            }

            return habits;
        }

        private global::Health.Web.Api.Client.IGetPatientById_Patients_Relationships_Habits? MapIGetPatientById_Patients_Relationships_Habits(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Habit", global::System.StringComparison.Ordinal))
            {
                return _getPatientById_Patients_Relationships_Habits_HabitFromHabitEntityMapper.Map(snapshot.GetEntity<global::Health.Web.Api.Client.State.HabitEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::Health.Web.Api.Client.IGetPatientById_Patients_Relationships_Professional? MapIGetPatientById_Patients_Relationships_Professional(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Professional", global::System.StringComparison.Ordinal))
            {
                return _getPatientById_Patients_Relationships_Professional_ProfessionalFromProfessionalEntityMapper.Map(snapshot.GetEntity<global::Health.Web.Api.Client.State.ProfessionalEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::Health.Web.Api.Client.IGetPatientById_Patients_Relationships_Professional_User? MapIGetPatientById_Patients_Relationships_Professional_User(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                return _getPatientById_Patients_Relationships_Professional_User_UserFromUserEntityMapper.Map(snapshot.GetEntity<global::Health.Web.Api.Client.State.UserEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class GetPatientById_Patients_User_UserFromUserEntityMapper : global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.UserEntity, GetPatientById_Patients_User_User>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetPatientById_Patients_User_UserFromUserEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetPatientById_Patients_User_User Map(global::Health.Web.Api.Client.State.UserEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetPatientById_Patients_User_User(entity.FirstName, entity.LastName, entity.Email, entity.PhoneNumber, entity.Pronouns);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class GetPatientById_Patients_Relationships_RelationshipFromRelationshipEntityMapper : global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.RelationshipEntity, GetPatientById_Patients_Relationships_Relationship>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.HabitEntity, GetPatientById_Patients_Relationships_Habits_Habit> _getPatientById_Patients_Relationships_Habits_HabitFromHabitEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.ProfessionalEntity, GetPatientById_Patients_Relationships_Professional_Professional> _getPatientById_Patients_Relationships_Professional_ProfessionalFromProfessionalEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.UserEntity, GetPatientById_Patients_Relationships_Professional_User_User> _getPatientById_Patients_Relationships_Professional_User_UserFromUserEntityMapper;
        public GetPatientById_Patients_Relationships_RelationshipFromRelationshipEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.HabitEntity, GetPatientById_Patients_Relationships_Habits_Habit> getPatientById_Patients_Relationships_Habits_HabitFromHabitEntityMapper, global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.ProfessionalEntity, GetPatientById_Patients_Relationships_Professional_Professional> getPatientById_Patients_Relationships_Professional_ProfessionalFromProfessionalEntityMapper, global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.UserEntity, GetPatientById_Patients_Relationships_Professional_User_User> getPatientById_Patients_Relationships_Professional_User_UserFromUserEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getPatientById_Patients_Relationships_Habits_HabitFromHabitEntityMapper = getPatientById_Patients_Relationships_Habits_HabitFromHabitEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getPatientById_Patients_Relationships_Habits_HabitFromHabitEntityMapper));
            _getPatientById_Patients_Relationships_Professional_ProfessionalFromProfessionalEntityMapper = getPatientById_Patients_Relationships_Professional_ProfessionalFromProfessionalEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getPatientById_Patients_Relationships_Professional_ProfessionalFromProfessionalEntityMapper));
            _getPatientById_Patients_Relationships_Professional_User_UserFromUserEntityMapper = getPatientById_Patients_Relationships_Professional_User_UserFromUserEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getPatientById_Patients_Relationships_Professional_User_UserFromUserEntityMapper));
        }

        public GetPatientById_Patients_Relationships_Relationship Map(global::Health.Web.Api.Client.State.RelationshipEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetPatientById_Patients_Relationships_Relationship(MapIGetPatientById_Patients_Relationships_HabitsArray(entity.Habits, snapshot), MapIGetPatientById_Patients_Relationships_Professional(entity.Professional, snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Health.Web.Api.Client.IGetPatientById_Patients_Relationships_Habits?>? MapIGetPatientById_Patients_Relationships_HabitsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var habits = new global::System.Collections.Generic.List<global::Health.Web.Api.Client.IGetPatientById_Patients_Relationships_Habits?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                habits.Add(MapIGetPatientById_Patients_Relationships_Habits(child, snapshot));
            }

            return habits;
        }

        private global::Health.Web.Api.Client.IGetPatientById_Patients_Relationships_Habits? MapIGetPatientById_Patients_Relationships_Habits(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Habit", global::System.StringComparison.Ordinal))
            {
                return _getPatientById_Patients_Relationships_Habits_HabitFromHabitEntityMapper.Map(snapshot.GetEntity<global::Health.Web.Api.Client.State.HabitEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::Health.Web.Api.Client.IGetPatientById_Patients_Relationships_Professional? MapIGetPatientById_Patients_Relationships_Professional(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Professional", global::System.StringComparison.Ordinal))
            {
                return _getPatientById_Patients_Relationships_Professional_ProfessionalFromProfessionalEntityMapper.Map(snapshot.GetEntity<global::Health.Web.Api.Client.State.ProfessionalEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::Health.Web.Api.Client.IGetPatientById_Patients_Relationships_Professional_User? MapIGetPatientById_Patients_Relationships_Professional_User(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                return _getPatientById_Patients_Relationships_Professional_User_UserFromUserEntityMapper.Map(snapshot.GetEntity<global::Health.Web.Api.Client.State.UserEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class GetPatientById_Patients_Relationships_Habits_HabitFromHabitEntityMapper : global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.HabitEntity, GetPatientById_Patients_Relationships_Habits_Habit>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetPatientById_Patients_Relationships_Habits_HabitFromHabitEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetPatientById_Patients_Relationships_Habits_Habit Map(global::Health.Web.Api.Client.State.HabitEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetPatientById_Patients_Relationships_Habits_Habit(entity.Id, entity.HabitName);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class GetPatientById_Patients_Relationships_Professional_ProfessionalFromProfessionalEntityMapper : global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.ProfessionalEntity, GetPatientById_Patients_Relationships_Professional_Professional>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.UserEntity, GetPatientById_Patients_Relationships_Professional_User_User> _getPatientById_Patients_Relationships_Professional_User_UserFromUserEntityMapper;
        public GetPatientById_Patients_Relationships_Professional_ProfessionalFromProfessionalEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.UserEntity, GetPatientById_Patients_Relationships_Professional_User_User> getPatientById_Patients_Relationships_Professional_User_UserFromUserEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getPatientById_Patients_Relationships_Professional_User_UserFromUserEntityMapper = getPatientById_Patients_Relationships_Professional_User_UserFromUserEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getPatientById_Patients_Relationships_Professional_User_UserFromUserEntityMapper));
        }

        public GetPatientById_Patients_Relationships_Professional_Professional Map(global::Health.Web.Api.Client.State.ProfessionalEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetPatientById_Patients_Relationships_Professional_Professional(entity.Id, MapIGetPatientById_Patients_Relationships_Professional_User(entity.User, snapshot));
        }

        private global::Health.Web.Api.Client.IGetPatientById_Patients_Relationships_Professional_User? MapIGetPatientById_Patients_Relationships_Professional_User(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                return _getPatientById_Patients_Relationships_Professional_User_UserFromUserEntityMapper.Map(snapshot.GetEntity<global::Health.Web.Api.Client.State.UserEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class GetPatientById_Patients_Relationships_Professional_User_UserFromUserEntityMapper : global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.UserEntity, GetPatientById_Patients_Relationships_Professional_User_User>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetPatientById_Patients_Relationships_Professional_User_UserFromUserEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetPatientById_Patients_Relationships_Professional_User_User Map(global::Health.Web.Api.Client.State.UserEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetPatientById_Patients_Relationships_Professional_User_User(entity.FirstName, entity.LastName, entity.Email, entity.PhoneNumber, entity.Pronouns);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class AddHealthLogBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Health.Web.Api.Client.IAddHealthLogResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Health.Web.Api.Client.IAddHealthLogResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public AddHealthLogBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Health.Web.Api.Client.IAddHealthLogResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IAddHealthLogResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IAddHealthLogResult Result, AddHealthLogResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IAddHealthLogResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IAddHealthLogResult, AddHealthLogResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? addHealthLogId = default !;
            _entityStore.Update(session =>
            {
                addHealthLogId = UpdateIAddHealthLog_AddHealthLogEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addHealthLog"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new AddHealthLogResultInfo(addHealthLogId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIAddHealthLog_AddHealthLogEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("HealthLog", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Health.Web.Api.Client.State.HealthLogEntity? entity))
                {
                    session.SetEntity(entityId, new global::Health.Web.Api.Client.State.HealthLogEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Health.Web.Api.Client.State.HealthLogEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class AddPatientBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Health.Web.Api.Client.IAddPatientResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Health.Web.Api.Client.IAddPatientResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public AddPatientBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Health.Web.Api.Client.IAddPatientResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IAddPatientResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IAddPatientResult Result, AddPatientResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IAddPatientResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IAddPatientResult, AddPatientResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::Health.Web.Api.Client.State.AddPatientResponsePayloadData? addPatientId = default !;
            _entityStore.Update(session =>
            {
                addPatientId = DeserializeIAddPatient_AddPatient(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addPatient"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new AddPatientResultInfo(addPatientId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Health.Web.Api.Client.State.AddPatientResponsePayloadData? DeserializeIAddPatient_AddPatient(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AddPatientResponsePayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Health.Web.Api.Client.State.AddPatientResponsePayloadData(typename, patient: UpdateIAddPatient_AddPatient_PatientEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "patient"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIAddPatient_AddPatient_PatientEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Patient", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Health.Web.Api.Client.State.PatientEntity? entity))
                {
                    session.SetEntity(entityId, new global::Health.Web.Api.Client.State.PatientEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "userId")), entity.User, entity.Relationships));
                }
                else
                {
                    session.SetEntity(entityId, new global::Health.Web.Api.Client.State.PatientEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "userId")), default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class GetPatientByIdBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Health.Web.Api.Client.IGetPatientByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Health.Web.Api.Client.IGetPatientByIdResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetPatientByIdBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Health.Web.Api.Client.IGetPatientByIdResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetPatientByIdResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetPatientByIdResult Result, GetPatientByIdResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetPatientByIdResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetPatientByIdResult, GetPatientByIdResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? patientsId = default !;
            _entityStore.Update(session =>
            {
                patientsId = UpdateIGetPatientById_PatientsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "patients"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetPatientByIdResultInfo(patientsId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetPatientById_PatientsEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var patients = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                patients.Add(UpdateIGetPatientById_PatientsEntity(session, child, entityIds));
            }

            return patients;
        }

        private global::StrawberryShake.EntityId? UpdateIGetPatientById_PatientsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Patient", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Health.Web.Api.Client.State.PatientEntity? entity))
                {
                    session.SetEntity(entityId, new global::Health.Web.Api.Client.State.PatientEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), entity.UserId, UpdateIGetPatientById_Patients_UserEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "user"), entityIds), UpdateIGetPatientById_Patients_RelationshipsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "relationships"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::Health.Web.Api.Client.State.PatientEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), default !, UpdateIGetPatientById_Patients_UserEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "user"), entityIds), UpdateIGetPatientById_Patients_RelationshipsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "relationships"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::StrawberryShake.EntityId? UpdateIGetPatientById_Patients_UserEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Health.Web.Api.Client.State.UserEntity? entity))
                {
                    session.SetEntity(entityId, new global::Health.Web.Api.Client.State.UserEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "firstName")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lastName")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "email")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "phoneNumber")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pronouns"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Health.Web.Api.Client.State.UserEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "firstName")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lastName")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "email")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "phoneNumber")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pronouns"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetPatientById_Patients_RelationshipsEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var relationships = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                relationships.Add(UpdateIGetPatientById_Patients_RelationshipsEntity(session, child, entityIds));
            }

            return relationships;
        }

        private global::StrawberryShake.EntityId? UpdateIGetPatientById_Patients_RelationshipsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Relationship", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Health.Web.Api.Client.State.RelationshipEntity? entity))
                {
                    session.SetEntity(entityId, new global::Health.Web.Api.Client.State.RelationshipEntity(UpdateIGetPatientById_Patients_Relationships_HabitsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "habits"), entityIds), UpdateIGetPatientById_Patients_Relationships_ProfessionalEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "professional"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::Health.Web.Api.Client.State.RelationshipEntity(UpdateIGetPatientById_Patients_Relationships_HabitsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "habits"), entityIds), UpdateIGetPatientById_Patients_Relationships_ProfessionalEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "professional"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetPatientById_Patients_Relationships_HabitsEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var habits = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                habits.Add(UpdateIGetPatientById_Patients_Relationships_HabitsEntity(session, child, entityIds));
            }

            return habits;
        }

        private global::StrawberryShake.EntityId? UpdateIGetPatientById_Patients_Relationships_HabitsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Habit", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Health.Web.Api.Client.State.HabitEntity? entity))
                {
                    session.SetEntity(entityId, new global::Health.Web.Api.Client.State.HabitEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "habitName"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Health.Web.Api.Client.State.HabitEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "habitName"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIGetPatientById_Patients_Relationships_ProfessionalEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Professional", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Health.Web.Api.Client.State.ProfessionalEntity? entity))
                {
                    session.SetEntity(entityId, new global::Health.Web.Api.Client.State.ProfessionalEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), UpdateIGetPatientById_Patients_Relationships_Professional_UserEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "user"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::Health.Web.Api.Client.State.ProfessionalEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), UpdateIGetPatientById_Patients_Relationships_Professional_UserEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "user"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIGetPatientById_Patients_Relationships_Professional_UserEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Health.Web.Api.Client.State.UserEntity? entity))
                {
                    session.SetEntity(entityId, new global::Health.Web.Api.Client.State.UserEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "firstName")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lastName")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "email")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "phoneNumber")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pronouns"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Health.Web.Api.Client.State.UserEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "firstName")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lastName")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "email")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "phoneNumber")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pronouns"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class AddPatientResponsePayloadData
    {
        public AddPatientResponsePayloadData(global::System.String __typename, global::StrawberryShake.EntityId? patient = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Patient = patient;
        }

        public global::System.String __typename { get; }

        public global::StrawberryShake.EntityId? Patient { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class HoopApiClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
            "HealthLog" => ParseHealthLogEntityId(obj, __typename), "Patient" => ParsePatientEntityId(obj, __typename), "User" => ParseUserEntityId(obj, __typename), "Relationship" => ParseRelationshipEntityId(obj, __typename), "Habit" => ParseHabitEntityId(obj, __typename), "Professional" => ParseProfessionalEntityId(obj, __typename), _ => throw new global::System.NotSupportedException()}

            ;
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
            "HealthLog" => FormatHealthLogEntityId(entityId), "Patient" => FormatPatientEntityId(entityId), "User" => FormatUserEntityId(entityId), "Relationship" => FormatRelationshipEntityId(entityId), "Habit" => FormatHabitEntityId(entityId), "Professional" => FormatProfessionalEntityId(entityId), _ => throw new global::System.NotSupportedException()}

            ;
        }

        private global::StrawberryShake.EntityId ParseHealthLogEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatHealthLogEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParsePatientEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatPatientEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseUserEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatUserEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseRelationshipEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatRelationshipEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseHabitEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatHabitEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseProfessionalEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatProfessionalEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public partial class HoopApiClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public HoopApiClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories): base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.1.0")]
    public static partial class HoopApiClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::Health.Web.Api.Client.State.HoopApiClientStoreAccessor> AddHoopApiClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::Health.Web.Api.Client.State.HoopApiClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Health.Web.Api.Client.AddHealthLogMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Health.Web.Api.Client.AddPatientMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Health.Web.Api.Client.GetPatientByIdQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Health.Web.Api.Client.HoopApiClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Health.Web.Api.Client.IHoopApiClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::Health.Web.Api.Client.State.HoopApiClientStoreAccessor>("HoopApiClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("HoopApiClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.HealthLogEntity, global::Health.Web.Api.Client.AddHealthLog_AddHealthLog_HealthLog>, global::Health.Web.Api.Client.State.AddHealthLog_AddHealthLog_HealthLogFromHealthLogEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.PatientEntity, global::Health.Web.Api.Client.AddPatient_AddPatient_Patient_Patient>, global::Health.Web.Api.Client.State.AddPatient_AddPatient_Patient_PatientFromPatientEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.PatientEntity, global::Health.Web.Api.Client.GetPatientById_Patients_Patient>, global::Health.Web.Api.Client.State.GetPatientById_Patients_PatientFromPatientEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.UserEntity, global::Health.Web.Api.Client.GetPatientById_Patients_User_User>, global::Health.Web.Api.Client.State.GetPatientById_Patients_User_UserFromUserEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.RelationshipEntity, global::Health.Web.Api.Client.GetPatientById_Patients_Relationships_Relationship>, global::Health.Web.Api.Client.State.GetPatientById_Patients_Relationships_RelationshipFromRelationshipEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.HabitEntity, global::Health.Web.Api.Client.GetPatientById_Patients_Relationships_Habits_Habit>, global::Health.Web.Api.Client.State.GetPatientById_Patients_Relationships_Habits_HabitFromHabitEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.ProfessionalEntity, global::Health.Web.Api.Client.GetPatientById_Patients_Relationships_Professional_Professional>, global::Health.Web.Api.Client.State.GetPatientById_Patients_Relationships_Professional_ProfessionalFromProfessionalEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Health.Web.Api.Client.State.UserEntity, global::Health.Web.Api.Client.GetPatientById_Patients_Relationships_Professional_User_User>, global::Health.Web.Api.Client.State.GetPatientById_Patients_Relationships_Professional_User_UserFromUserEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UuidSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Health.Web.Api.Client.IAddHealthLogResult>, global::Health.Web.Api.Client.State.AddHealthLogResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Health.Web.Api.Client.IAddHealthLogResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Health.Web.Api.Client.IAddHealthLogMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Health.Web.Api.Client.IAddHealthLogResult>, global::Health.Web.Api.Client.State.AddHealthLogBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Health.Web.Api.Client.IAddHealthLogResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Health.Web.Api.Client.IAddHealthLogResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Health.Web.Api.Client.IAddHealthLogResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Health.Web.Api.Client.AddHealthLogMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Health.Web.Api.Client.IAddHealthLogMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Health.Web.Api.Client.AddHealthLogMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Health.Web.Api.Client.IAddPatientResult>, global::Health.Web.Api.Client.State.AddPatientResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Health.Web.Api.Client.IAddPatientResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Health.Web.Api.Client.IAddPatientMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Health.Web.Api.Client.IAddPatientResult>, global::Health.Web.Api.Client.State.AddPatientBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Health.Web.Api.Client.IAddPatientResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Health.Web.Api.Client.IAddPatientResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Health.Web.Api.Client.IAddPatientResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Health.Web.Api.Client.AddPatientMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Health.Web.Api.Client.IAddPatientMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Health.Web.Api.Client.AddPatientMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Health.Web.Api.Client.IGetPatientByIdResult>, global::Health.Web.Api.Client.State.GetPatientByIdResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Health.Web.Api.Client.IGetPatientByIdResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Health.Web.Api.Client.IGetPatientByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Health.Web.Api.Client.IGetPatientByIdResult>, global::Health.Web.Api.Client.State.GetPatientByIdBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Health.Web.Api.Client.IGetPatientByIdResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Health.Web.Api.Client.IGetPatientByIdResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Health.Web.Api.Client.IGetPatientByIdResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Health.Web.Api.Client.GetPatientByIdQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Health.Web.Api.Client.IGetPatientByIdQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Health.Web.Api.Client.GetPatientByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::Health.Web.Api.Client.State.HoopApiClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Health.Web.Api.Client.HoopApiClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Health.Web.Api.Client.IHoopApiClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Health.Web.Api.Client.HoopApiClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
